spring:
  application:
    name: hzero-gateway
  servlet:
    multipart:
      max-file-size: 30MB
      max-request-size: 30MB
  redis:
    host: ${SPRING_REDIS_HOST:redis.hzero.org}
    port: ${SPRING_REDIS_PORT:6379}
    database: ${SPRING_REDIS_DATABASE:4}
    jedis:
      pool:
        # 资源池中最大连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整
        max-active: ${SPRING_REDIS_POOL_MAX_ACTIVE:50}
        # 资源池运行最大空闲的连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整，一般建议和max-active保持一致，避免资源伸缩带来的开销
        max-idle: ${SPRING_REDIS_POOL_MAX_IDLE:50}
        # 当资源池连接用尽后，调用者的最大等待时间(单位为毫秒)
        # 默认 -1 表示永不超时，设置5秒
        max-wait: ${SPRING_REDIS_POOL_MAX_WAIT:5000}

zuul:
  addHostHeader: true
  routes:
    hiam:
      path: /iam/**
      serviceId: hzero-iam
    hoth:
      path: /oauth/**
      serviceId: hzero-oauth
      stripPrefix: false
      sensitiveHeaders: none
    hcnf:
      path: /hcnf/**
      serviceId: hzero-config
    hwgr:
      path: /swagger/**
      serviceId: hzero-swagger
    hagd:
      path: /hagd/**
      serviceId: hzero-asgard
    hsgp:
      path: /hsgp/**
      serviceId: hzero-governance
    hpfm:
      path: /hpfm/**
      serviceId: hzero-platform
    hfle:
      path: /hfle/**
      serviceId: hzero-file
    hmsg:
      path: /hmsg/**
      serviceId: hzero-message
    hsdr:
      path: /hsdr/**
      serviceId: hzero-scheduler
    himp:
      path: /himp/**
      serviceId: hzero-import
    hitf:
      path: /hitf/**
      serviceId: hzero-interface
    hwfl:
      path: /hwfl/**
      serviceId: hzero-workflow
    hwfe:
      path: /hwfe/**
      serviceId: hzero-workflow-editor
    hdtt:
      path: /hdtt/**
      serviceId: hzero-transfer
    hdtw:
      path: /hdtw/**
      serviceId: hzero-dw
    hptl:
      path: /hptl/**
      serviceId: hzero-portal
    hrpt:
      path: /hrpt/**
      serviceId: hzero-report
  semaphore:
    max-semaphores: 300
  sensitiveHeaders: Cookie,Set-Cookie
  host:
    connect-timeout-millis: ${ZUUL_HOST_CONNECT_TIMEOUT_MILLIS:40000}
    socket-timeout-millis: ${ZUUL_HOST_SOCKET_TIMEOUT_MILLIS:40000}

server:
  undertow:
    # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接
    # 默认值为8，建议设置每个CPU核心一个线程
    io-threads: ${SERVER_UNDERTOW_IO_THREADS:4}
    # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程
    # 默认等于 io-threads*8，它的值设置取决于系统的负载，可适当调大该值
    worker-threads: ${SERVER_UNDERTOW_WORKER_THREADS:128}
    # 每块buffer的空间大小，越小空间被利用越充分
    # 不要设置太大，以免影响其他应用，合适即可
    buffer-size: ${SERVER_UNDERTOW_BUFFER_SIZE:1024}
    # 是否分配的直接内存(NIO直接分配的堆外内存)
    # 默认false
    direct-buffers: true
    # HTTP POST请求最大的大小
    # 默认0，无限制，可设置10M
    max-http-post-size: 10485760

feign:
  hystrix:
    enabled: false

hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: ${HYSTRIX_COMMAND_TIMEOUT_IN_MILLISECONDS:120000}

ribbon:
  # 内部调用不限制请求时间
  ReadTimeout: ${RIBBON_READ_TIMEOUT:30000}
  # 限制连接建立时间
  ConnectTimeout: ${RIBBON_CONNECT_TIMEOUT:3000}
  httpclient:
    enabled: false
  okhttp:
    enabled: true

choerodon:
  gateway:
    helper:
      # gateway-helper serviceId
      service-id: ${CHOERODON_GATEWAY_HELPER_SERVICE_ID:hzero-gateway-helper}
      enabled: true
      # 是否打印 JWT
      enabled-jwt-log: ${CHOERODON_GATEWAY_HELPER_ENABLE_JWT_LOG:false}
      helper-skip-paths:
        - /oauth/**
        - /swagger/swagger-ui.html
        - /swagger/swagger-resources/**
        - /swagger/webjars/**
        - /swagger/docs/**
        - /hwfe/**
        - /hwfp/editor-app/**
        - /hwfp/lib/**
        - /hwfp/activiti-editor
        - /hwfp-*/editor-app/**
        - /hwfp-*/lib/**
        - /hwfp-*/activiti-editor

logging:
  level:
    io.choerodon: ${LOG_LEVEL:info}
    org.hzero: ${LOG_LEVEL:info}
    org.springframework.web: ${LOG_LEVEL:info}
    org.springframework.cloud: ${LOG_LEVEL:info}
